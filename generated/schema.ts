// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Squire extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("faith", Value.fromBigInt(BigInt.zero()));
    this.set("luck", Value.fromBigInt(BigInt.zero()));
    this.set("strength", Value.fromBigInt(BigInt.zero()));
    this.set("type", Value.fromBigInt(BigInt.zero()));
    this.set("wisdom", Value.fromBigInt(BigInt.zero()));
    this.set("genesis", Value.fromBigInt(BigInt.zero()));
    this.set("owner", Value.fromString(""));
    this.set("image", Value.fromString(""));
    this.set("typename", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Squire entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Squire must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Squire", id.toString(), this);
    }
  }

  static load(id: string): Squire | null {
    return changetype<Squire | null>(store.get("Squire", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get faith(): BigInt {
    let value = this.get("faith");
    return value!.toBigInt();
  }

  set faith(value: BigInt) {
    this.set("faith", Value.fromBigInt(value));
  }

  get luck(): BigInt {
    let value = this.get("luck");
    return value!.toBigInt();
  }

  set luck(value: BigInt) {
    this.set("luck", Value.fromBigInt(value));
  }

  get strength(): BigInt {
    let value = this.get("strength");
    return value!.toBigInt();
  }

  set strength(value: BigInt) {
    this.set("strength", Value.fromBigInt(value));
  }

  get type(): BigInt {
    let value = this.get("type");
    return value!.toBigInt();
  }

  set type(value: BigInt) {
    this.set("type", Value.fromBigInt(value));
  }

  get wisdom(): BigInt {
    let value = this.get("wisdom");
    return value!.toBigInt();
  }

  set wisdom(value: BigInt) {
    this.set("wisdom", Value.fromBigInt(value));
  }

  get genesis(): BigInt {
    let value = this.get("genesis");
    return value!.toBigInt();
  }

  set genesis(value: BigInt) {
    this.set("genesis", Value.fromBigInt(value));
  }

  get owner(): string {
    let value = this.get("owner");
    return value!.toString();
  }

  set owner(value: string) {
    this.set("owner", Value.fromString(value));
  }

  get image(): string {
    let value = this.get("image");
    return value!.toString();
  }

  set image(value: string) {
    this.set("image", Value.fromString(value));
  }

  get typename(): string {
    let value = this.get("typename");
    return value!.toString();
  }

  set typename(value: string) {
    this.set("typename", Value.fromString(value));
  }
}

export class InventoryItem extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("itemid", Value.fromBigInt(BigInt.zero()));
    this.set("itemamount", Value.fromBigInt(BigInt.zero()));
    this.set("owner", Value.fromString(""));
    this.set("contract", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save InventoryItem entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type InventoryItem must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("InventoryItem", id.toString(), this);
    }
  }

  static load(id: string): InventoryItem | null {
    return changetype<InventoryItem | null>(store.get("InventoryItem", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get itemid(): BigInt {
    let value = this.get("itemid");
    return value!.toBigInt();
  }

  set itemid(value: BigInt) {
    this.set("itemid", Value.fromBigInt(value));
  }

  get itemamount(): BigInt {
    let value = this.get("itemamount");
    return value!.toBigInt();
  }

  set itemamount(value: BigInt) {
    this.set("itemamount", Value.fromBigInt(value));
  }

  get owner(): string {
    let value = this.get("owner");
    return value!.toString();
  }

  set owner(value: string) {
    this.set("owner", Value.fromString(value));
  }

  get contract(): string {
    let value = this.get("contract");
    return value!.toString();
  }

  set contract(value: string) {
    this.set("contract", Value.fromString(value));
  }
}

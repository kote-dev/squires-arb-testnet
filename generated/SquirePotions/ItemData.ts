// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Initialized extends ethereum.Event {
  get params(): Initialized__Params {
    return new Initialized__Params(this);
  }
}

export class Initialized__Params {
  _event: Initialized;

  constructor(event: Initialized) {
    this._event = event;
  }

  get version(): i32 {
    return this._event.parameters[0].value.toI32();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class ItemData__getItemByTypeAndIdResultValue0Struct extends ethereum.Tuple {
  get itemType(): i32 {
    return this[0].toI32();
  }

  get dropRate(): i32 {
    return this[1].toI32();
  }

  get itemClass(): i32 {
    return this[2].toI32();
  }

  get rarity(): i32 {
    return this[3].toI32();
  }

  get itemId(): i32 {
    return this[4].toI32();
  }

  get name(): string {
    return this[5].toString();
  }
}

export class ItemData extends ethereum.SmartContract {
  static bind(address: Address): ItemData {
    return new ItemData("ItemData", address);
  }

  checkLevelCap(itemType: i32): BigInt {
    let result = super.call("checkLevelCap", "checkLevelCap(uint8):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(itemType))
    ]);

    return result[0].toBigInt();
  }

  try_checkLevelCap(itemType: i32): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "checkLevelCap",
      "checkLevelCap(uint8):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(itemType))]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  checkTypes(itemType: i32): BigInt {
    let result = super.call("checkTypes", "checkTypes(uint8):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(itemType))
    ]);

    return result[0].toBigInt();
  }

  try_checkTypes(itemType: i32): ethereum.CallResult<BigInt> {
    let result = super.tryCall("checkTypes", "checkTypes(uint8):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(itemType))
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  chooseType(probability: BigInt, itemType: i32): BigInt {
    let result = super.call(
      "chooseType",
      "chooseType(uint256,uint8):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(probability),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(itemType))
      ]
    );

    return result[0].toBigInt();
  }

  try_chooseType(
    probability: BigInt,
    itemType: i32
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "chooseType",
      "chooseType(uint256,uint8):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(probability),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(itemType))
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getBaseItemId(itemId: BigInt): BigInt {
    let result = super.call(
      "getBaseItemId",
      "getBaseItemId(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(itemId)]
    );

    return result[0].toBigInt();
  }

  try_getBaseItemId(itemId: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getBaseItemId",
      "getBaseItemId(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(itemId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getItemByTypeAndId(
    itemType: i32,
    itemId: BigInt
  ): ItemData__getItemByTypeAndIdResultValue0Struct {
    let result = super.call(
      "getItemByTypeAndId",
      "getItemByTypeAndId(uint8,uint256):((uint8,uint16,uint8,uint8,uint16,string))",
      [
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(itemType)),
        ethereum.Value.fromUnsignedBigInt(itemId)
      ]
    );

    return changetype<ItemData__getItemByTypeAndIdResultValue0Struct>(
      result[0].toTuple()
    );
  }

  try_getItemByTypeAndId(
    itemType: i32,
    itemId: BigInt
  ): ethereum.CallResult<ItemData__getItemByTypeAndIdResultValue0Struct> {
    let result = super.tryCall(
      "getItemByTypeAndId",
      "getItemByTypeAndId(uint8,uint256):((uint8,uint16,uint8,uint8,uint16,string))",
      [
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(itemType)),
        ethereum.Value.fromUnsignedBigInt(itemId)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<ItemData__getItemByTypeAndIdResultValue0Struct>(
        value[0].toTuple()
      )
    );
  }

  getItemIdForLevel(itemType: i32, itemId: BigInt, level: BigInt): BigInt {
    let result = super.call(
      "getItemIdForLevel",
      "getItemIdForLevel(uint8,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(itemType)),
        ethereum.Value.fromUnsignedBigInt(itemId),
        ethereum.Value.fromUnsignedBigInt(level)
      ]
    );

    return result[0].toBigInt();
  }

  try_getItemIdForLevel(
    itemType: i32,
    itemId: BigInt,
    level: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getItemIdForLevel",
      "getItemIdForLevel(uint8,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(itemType)),
        ethereum.Value.fromUnsignedBigInt(itemId),
        ethereum.Value.fromUnsignedBigInt(level)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getLevelFromItemId(itemId: BigInt): BigInt {
    let result = super.call(
      "getLevelFromItemId",
      "getLevelFromItemId(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(itemId)]
    );

    return result[0].toBigInt();
  }

  try_getLevelFromItemId(itemId: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getLevelFromItemId",
      "getLevelFromItemId(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(itemId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  random(number: BigInt, seed: BigInt): BigInt {
    let result = super.call("random", "random(uint256,uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(number),
      ethereum.Value.fromUnsignedBigInt(seed)
    ]);

    return result[0].toBigInt();
  }

  try_random(number: BigInt, seed: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall("random", "random(uint256,uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(number),
      ethereum.Value.fromUnsignedBigInt(seed)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class AddItemDataCall extends ethereum.Call {
  get inputs(): AddItemDataCall__Inputs {
    return new AddItemDataCall__Inputs(this);
  }

  get outputs(): AddItemDataCall__Outputs {
    return new AddItemDataCall__Outputs(this);
  }
}

export class AddItemDataCall__Inputs {
  _call: AddItemDataCall;

  constructor(call: AddItemDataCall) {
    this._call = call;
  }

  get itemType(): i32 {
    return this._call.inputValues[0].value.toI32();
  }

  get itemId(): Array<i32> {
    return this._call.inputValues[1].value.toI32Array();
  }

  get itemClass(): Array<i32> {
    return this._call.inputValues[2].value.toI32Array();
  }

  get rarity(): Array<i32> {
    return this._call.inputValues[3].value.toI32Array();
  }

  get rate(): Array<i32> {
    return this._call.inputValues[4].value.toI32Array();
  }

  get name(): Array<string> {
    return this._call.inputValues[5].value.toStringArray();
  }
}

export class AddItemDataCall__Outputs {
  _call: AddItemDataCall;

  constructor(call: AddItemDataCall) {
    this._call = call;
  }
}

export class CalculateMaxCall extends ethereum.Call {
  get inputs(): CalculateMaxCall__Inputs {
    return new CalculateMaxCall__Inputs(this);
  }

  get outputs(): CalculateMaxCall__Outputs {
    return new CalculateMaxCall__Outputs(this);
  }
}

export class CalculateMaxCall__Inputs {
  _call: CalculateMaxCall;

  constructor(call: CalculateMaxCall) {
    this._call = call;
  }

  get itemType(): i32 {
    return this._call.inputValues[0].value.toI32();
  }
}

export class CalculateMaxCall__Outputs {
  _call: CalculateMaxCall;

  constructor(call: CalculateMaxCall) {
    this._call = call;
  }
}

export class InitCall extends ethereum.Call {
  get inputs(): InitCall__Inputs {
    return new InitCall__Inputs(this);
  }

  get outputs(): InitCall__Outputs {
    return new InitCall__Outputs(this);
  }
}

export class InitCall__Inputs {
  _call: InitCall;

  constructor(call: InitCall) {
    this._call = call;
  }
}

export class InitCall__Outputs {
  _call: InitCall;

  constructor(call: InitCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class WithdrawToOwnerCall extends ethereum.Call {
  get inputs(): WithdrawToOwnerCall__Inputs {
    return new WithdrawToOwnerCall__Inputs(this);
  }

  get outputs(): WithdrawToOwnerCall__Outputs {
    return new WithdrawToOwnerCall__Outputs(this);
  }
}

export class WithdrawToOwnerCall__Inputs {
  _call: WithdrawToOwnerCall;

  constructor(call: WithdrawToOwnerCall) {
    this._call = call;
  }
}

export class WithdrawToOwnerCall__Outputs {
  _call: WithdrawToOwnerCall;

  constructor(call: WithdrawToOwnerCall) {
    this._call = call;
  }
}
